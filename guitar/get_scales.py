"""
Quick way to get the frets of a scale on entire fretboard from just 1 chord
"""

__author__ = 'Mitchell Williams'
__contact__ = 'git:MW-OS'
__date__ = '2024.11'
__license__ = "GNU"

# -----------------------------------------------------------------------------
# examples of inputs, you can set these to whatever you'd like to run with

# --> The scale variable takes your scale from any string in a list of lists;
#     --> The string is in the first list and the scale goes in the second
scale = ['d', [14, 13, 11, 10, 7, 4, 6]]

# example parameters (set you values in here)
# --> The tuning variable is your strings tuning (can be any number of strings)
#     --> set to standard guitar tuning by default
tuning = ['e', 'a', 'd', 'g', 'b', 'e']

# --> The notes variable lets you enter the names of your note in one octave
#     --> This is set to the western 12 note system by default
notes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]

# -----------------------------------------------------------------------------
# functions


def get_fretboard_scale(
        _scale: list[str | list[int]] = ('d', (14, 13, 11, 10, 7, 4, 6)),
        _tuning: list[str] = ('e', 'a', 'd', 'g', 'b', 'e'),
        _notes: list[str] = ("C", "C#", "D", "D#", "E", "F",
                             "F#", "G", "G#", "A", "A#", "B"),
        ) -> list[list[str | list[int]]]:
    """
    With a scale on one string, return two octaves of that scale on all strings
    :param _scale: the desired scale to be reproduced on the whole fretboard
    :param _tuning: ordered list of all the strings and their tuning
    :param _notes: ordering of notes in 1 octave, default is western 12 notes
    :return: the fretboard list contains the desired scale on all strings
    """

    # ---- setting up all the function parameters ----

    # get a list of all notes, repeats once
    notes_ = [i.lower() for i in _notes] * 2

    # identify the position of the incoming string in the list of notes
    string_ref = notes_.index(_scale[0].lower())

    # double the scale so that it includes two octaves, remove duplicates
    scale_ = set(_scale[1]).union(i + len(_notes) for i in _scale[1])

    # initiate the outgoing fretboard with the scales on it
    fretboard_ = [[i] for i in _tuning]

    # ---- generating the scale over 2 octaves on all stings ----

    # loop through the strings and build the scale on each string
    for i in fretboard_:
        # count how many notes away the reference string is
        string_diff = string_ref - notes_.index(i[0].lower())
        # add all the notes onto the fretboard
        i.append(sorted((j + string_diff) % (2 * len(_notes)) for j in scale_))

    return fretboard_


def show_fretboard(_fretboard: list[list[str | list[int]]]) -> None:
    """
    Takes in a generated fretboard, with scale on all strings, and displays it
    :param _fretboard: list generated by the get_fretboard_scale function
    :return: None
    """

    # ---- print the strings from highest to lowest ----
    # loop through the fretboard object backwards
    for i in reversed(_fretboard):
        # format each line
        _string = ", ".join(str(j).rjust(2) for j in i[1])
        # print the formatted line
        print(f"{i[0].upper()}  :: {_string}")


# ---- run current file directly ----
if __name__ == "__main__":
    print(f"running {__file__}")
    fretboard = get_fretboard_scale(_scale=scale)
    show_fretboard(fretboard)

# eof
